    <div id="add-conversation-modal" class="modal-wrapper">
        <div class="modal">
            <a onclick="closeModal()" class="modal-close">+</a>
            <div class="modal-title">
                <h2>Create New Conversation</h2>
            </div>
            <div class="modal-body">
                <form id="add-conversation-form">
                    <input 
                    type="text"
                    placeholder="search user by name or email or mobile"
                    name="user"
                    id="user"
                    autocapitalize="off"
                    >
                    <p class="error"></p>
                    <div class="search_users"></div>
                    <input type="submit" value="Submit" class="hide">
                </form>
            </div>
        </div>
    </div>

    <script>

        const modal = document.querySelector("#add-conversation-modal")

        //time detection
        let typingTimer;
        const doneTypingInterval = 500;
        const input = document.querySelector("input#user")
        let users_placeholder = document.querySelector('.search_users')

        //conversation error toast
        const conversationFailureToast = Toastify({
            text: 'Error creating a conversation!',
            duration: 1000
        });

        function closeModal() {
            modal.style.display = "none";

            //reset
            users_placeholder.style.display = "none";
            input.value = "";
        };

        function openModal() {
            modal.style.display = "block"
        };

        input.addEventListener('keyup', function() {
            clearTimeout(typingTimer);

            users_placeholder.style.display = 'none';
            if(input.value) {
                typingTimer = setTimeout(searchUser, doneTypingInterval);
            }
        });

        input.addEventListener('keydown', function() {
            clearTimeout(typingTimer)
        });

        //send request for search
        async function searchUser() {
            let response = await fetch("/inbox/search", {
                method: "POST",
                body: JSON.stringify({
                    user: input.value
                }),
                headers: {
                    "Content-type": "application/json; charset=UTF-8"
                }
            });
            let result = await response.json();

            //handle error and response
            if(result.errors) {
                const errorplaceholder = document.querySelector("p.error");
                errorplaceholder.textContent = result.errors.common.msg;
                errorplaceholder.style.display = "block"
            } else {
                if(result.length > 0) {
                    let generateHtml = "<ul>";
                        result.forEach((user) => {
                            const avatar = user.avatar ? "./uploads/avatars/" + user.avatar : "./images/nophoto.png";
                            generateHtml = generateHtml + `<li onclick="createConversation('${user._id}', '${user.name}', '${user.avatar}')">
                                <div class="user">
                                    <div class="avatar">
                                        <img src="${avatar}" />
                                    </div>
                                    <div class="username">${user.name}</div>
                                </div>
                            </li>`;
                        });
                        generateHtml = generateHtml + "</ul>";
                        users_placeholder.innerHTML = generateHtml;
                        users_placeholder.style.display = "block"
                }
            }
        }

        async function createConversation(participant_id, name, avatar) {
            try {
                const response = await fetch("/inbox/conversation", {
                    method: "POST",
                    body: JSON.stringify({
                        participant: name,
                        id: participant_id,
                        avatar: avatar != "undefined" ? avatar : null,
                    }),
                    headers: {
                        "Content-type": "application/json; charset=UTF-8"
                    }
                });

                const result = await response.json();

                if(!result.errors) {
                    //reset
                    users_placeholder.style.display = "none";
                    input.value = name;

                    //reload the page aster 1 sec
                    setTimeout(() => {
                        location.reload();
                    }, 100)
                } else {
                    throw new Error(result.errors.common.msg)
                }
            } catch(err) {
                conversationFailureToast.showToast();
            }
        }

    </script>